/*
 * This class file was automatically generated by ASN1bean (http://www.beanit.com)
 */

package com.beanit.asn1bean.compiler.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class PECSIM implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	private byte[] code = null;
	public PEHeader csimHeader = null;
	public BerObjectIdentifier templateID = null;
	public File adfCsim = null;
	public File efArr = null;
	public File efCallCount = null;
	public File efImsiM = null;
	public File efImsiT = null;
	public File efTmsi = null;
	public File efAh = null;
	public File efAop = null;
	public File efAloc = null;
	public File efCdmahome = null;
	public File efZnregi = null;
	public File efSnregi = null;
	public File efDistregi = null;
	public File efAccolc = null;
	public File efTerm = null;
	public File efAcp = null;
	public File efPrl = null;
	public File efRuimid = null;
	public File efCsimSt = null;
	public File efSpc = null;
	public File efOtapaspc = null;
	public File efNamlock = null;
	public File efOta = null;
	public File efSp = null;
	public File efEsnMeidMe = null;
	public File efLi = null;
	public File efUsgind = null;
	public File efAd = null;
	public File efMaxPrl = null;
	public File efSpcs = null;
	public File efMecrp = null;
	public File efHomeTag = null;
	public File efGroupTag = null;
	public File efSpecificTag = null;
	public File efCallPrompt = null;
	
	public PECSIM() {
	}

	public PECSIM(byte[] code) {
		this.code = code;
	}

	public PECSIM(PEHeader csimHeader, BerObjectIdentifier templateID, File adfCsim, File efArr, File efCallCount, File efImsiM, File efImsiT, File efTmsi, File efAh, File efAop, File efAloc, File efCdmahome, File efZnregi, File efSnregi, File efDistregi, File efAccolc, File efTerm, File efAcp, File efPrl, File efRuimid, File efCsimSt, File efSpc, File efOtapaspc, File efNamlock, File efOta, File efSp, File efEsnMeidMe, File efLi, File efUsgind, File efAd, File efMaxPrl, File efSpcs, File efMecrp, File efHomeTag, File efGroupTag, File efSpecificTag, File efCallPrompt) {
		this.csimHeader = csimHeader;
		this.templateID = templateID;
		this.adfCsim = adfCsim;
		this.efArr = efArr;
		this.efCallCount = efCallCount;
		this.efImsiM = efImsiM;
		this.efImsiT = efImsiT;
		this.efTmsi = efTmsi;
		this.efAh = efAh;
		this.efAop = efAop;
		this.efAloc = efAloc;
		this.efCdmahome = efCdmahome;
		this.efZnregi = efZnregi;
		this.efSnregi = efSnregi;
		this.efDistregi = efDistregi;
		this.efAccolc = efAccolc;
		this.efTerm = efTerm;
		this.efAcp = efAcp;
		this.efPrl = efPrl;
		this.efRuimid = efRuimid;
		this.efCsimSt = efCsimSt;
		this.efSpc = efSpc;
		this.efOtapaspc = efOtapaspc;
		this.efNamlock = efNamlock;
		this.efOta = efOta;
		this.efSp = efSp;
		this.efEsnMeidMe = efEsnMeidMe;
		this.efLi = efLi;
		this.efUsgind = efUsgind;
		this.efAd = efAd;
		this.efMaxPrl = efMaxPrl;
		this.efSpcs = efSpcs;
		this.efMecrp = efMecrp;
		this.efHomeTag = efHomeTag;
		this.efGroupTag = efGroupTag;
		this.efSpecificTag = efSpecificTag;
		this.efCallPrompt = efCallPrompt;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += efCallPrompt.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
		reverseOS.write(0x24);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efSpecificTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
		reverseOS.write(0x23);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efGroupTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
		reverseOS.write(0x22);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efHomeTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
		reverseOS.write(0x21);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efMecrp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
		reverseOS.write(0x20);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efSpcs.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
		reverseOS.write(0x1F);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efMaxPrl.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
		reverseOS.write(0xBE);
		codeLength += 1;
		
		codeLength += efAd.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
		reverseOS.write(0xBD);
		codeLength += 1;
		
		codeLength += efUsgind.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
		reverseOS.write(0xBC);
		codeLength += 1;
		
		codeLength += efLi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
		reverseOS.write(0xBB);
		codeLength += 1;
		
		codeLength += efEsnMeidMe.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
		reverseOS.write(0xBA);
		codeLength += 1;
		
		codeLength += efSp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
		reverseOS.write(0xB9);
		codeLength += 1;
		
		codeLength += efOta.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
		reverseOS.write(0xB8);
		codeLength += 1;
		
		codeLength += efNamlock.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
		reverseOS.write(0xB7);
		codeLength += 1;
		
		codeLength += efOtapaspc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
		reverseOS.write(0xB6);
		codeLength += 1;
		
		codeLength += efSpc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
		reverseOS.write(0xB5);
		codeLength += 1;
		
		codeLength += efCsimSt.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
		reverseOS.write(0xB4);
		codeLength += 1;
		
		codeLength += efRuimid.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
		reverseOS.write(0xB3);
		codeLength += 1;
		
		codeLength += efPrl.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
		reverseOS.write(0xB2);
		codeLength += 1;
		
		codeLength += efAcp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
		reverseOS.write(0xB1);
		codeLength += 1;
		
		codeLength += efTerm.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
		reverseOS.write(0xB0);
		codeLength += 1;
		
		codeLength += efAccolc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
		reverseOS.write(0xAF);
		codeLength += 1;
		
		codeLength += efDistregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
		reverseOS.write(0xAE);
		codeLength += 1;
		
		codeLength += efSnregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
		reverseOS.write(0xAD);
		codeLength += 1;
		
		codeLength += efZnregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
		reverseOS.write(0xAC);
		codeLength += 1;
		
		codeLength += efCdmahome.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
		reverseOS.write(0xAB);
		codeLength += 1;
		
		codeLength += efAloc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
		reverseOS.write(0xAA);
		codeLength += 1;
		
		codeLength += efAop.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
		reverseOS.write(0xA9);
		codeLength += 1;
		
		codeLength += efAh.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
		reverseOS.write(0xA8);
		codeLength += 1;
		
		codeLength += efTmsi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
		reverseOS.write(0xA7);
		codeLength += 1;
		
		codeLength += efImsiT.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		reverseOS.write(0xA6);
		codeLength += 1;
		
		codeLength += efImsiM.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
		reverseOS.write(0xA5);
		codeLength += 1;
		
		codeLength += efCallCount.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		codeLength += efArr.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
		reverseOS.write(0xA3);
		codeLength += 1;
		
		codeLength += adfCsim.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += csimHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int tlByteCount = 0;
		int vByteCount = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			tlByteCount += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		tlByteCount += length.decode(is);
		int lengthVal = length.val;
		vByteCount += berTag.decode(is);

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			csimHeader = new PEHeader();
			vByteCount += csimHeader.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			vByteCount += templateID.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			adfCsim = new File();
			vByteCount += adfCsim.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efArr = new File();
			vByteCount += efArr.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efCallCount = new File();
			vByteCount += efCallCount.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efImsiM = new File();
			vByteCount += efImsiM.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efImsiT = new File();
			vByteCount += efImsiT.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efTmsi = new File();
			vByteCount += efTmsi.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efAh = new File();
			vByteCount += efAh.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			efAop = new File();
			vByteCount += efAop.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efAloc = new File();
			vByteCount += efAloc.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efCdmahome = new File();
			vByteCount += efCdmahome.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			efZnregi = new File();
			vByteCount += efZnregi.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efSnregi = new File();
			vByteCount += efSnregi.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efDistregi = new File();
			vByteCount += efDistregi.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			efAccolc = new File();
			vByteCount += efAccolc.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efTerm = new File();
			vByteCount += efTerm.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efAcp = new File();
			vByteCount += efAcp.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efPrl = new File();
			vByteCount += efPrl.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efRuimid = new File();
			vByteCount += efRuimid.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efCsimSt = new File();
			vByteCount += efCsimSt.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efSpc = new File();
			vByteCount += efSpc.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efOtapaspc = new File();
			vByteCount += efOtapaspc.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efNamlock = new File();
			vByteCount += efNamlock.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efOta = new File();
			vByteCount += efOta.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efSp = new File();
			vByteCount += efSp.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efEsnMeidMe = new File();
			vByteCount += efEsnMeidMe.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efLi = new File();
			vByteCount += efLi.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efUsgind = new File();
			vByteCount += efUsgind.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efAd = new File();
			vByteCount += efAd.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efMaxPrl = new File();
			vByteCount += efMaxPrl.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efSpcs = new File();
			vByteCount += efSpcs.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efMecrp = new File();
			vByteCount += efMecrp.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			efHomeTag = new File();
			vByteCount += efHomeTag.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efGroupTag = new File();
			vByteCount += efGroupTag.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efSpecificTag = new File();
			vByteCount += efSpecificTag.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			efCallPrompt = new File();
			vByteCount += efCallPrompt.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (lengthVal < 0) {
			if (!berTag.equals(0, 0, 0)) {
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			vByteCount += BerLength.readEocByte(is);
			return tlByteCount + vByteCount;
		}

		throw new IOException("Unexpected end of sequence, length tag: " + lengthVal + ", bytes decoded: " + vByteCount);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csimHeader != null) {
			sb.append("csimHeader: ");
			csimHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("csimHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (adfCsim != null) {
			sb.append("adfCsim: ");
			adfCsim.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("adfCsim: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efArr != null) {
			sb.append("efArr: ");
			efArr.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efArr: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCallCount != null) {
			sb.append("efCallCount: ");
			efCallCount.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCallCount: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efImsiM != null) {
			sb.append("efImsiM: ");
			efImsiM.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efImsiM: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efImsiT != null) {
			sb.append("efImsiT: ");
			efImsiT.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efImsiT: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efTmsi != null) {
			sb.append("efTmsi: ");
			efTmsi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efTmsi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAh != null) {
			sb.append("efAh: ");
			efAh.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAh: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAop != null) {
			sb.append("efAop: ");
			efAop.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAop: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAloc != null) {
			sb.append("efAloc: ");
			efAloc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAloc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCdmahome != null) {
			sb.append("efCdmahome: ");
			efCdmahome.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCdmahome: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efZnregi != null) {
			sb.append("efZnregi: ");
			efZnregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efZnregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSnregi != null) {
			sb.append("efSnregi: ");
			efSnregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSnregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efDistregi != null) {
			sb.append("efDistregi: ");
			efDistregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efDistregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAccolc != null) {
			sb.append("efAccolc: ");
			efAccolc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAccolc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efTerm != null) {
			sb.append("efTerm: ");
			efTerm.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efTerm: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAcp != null) {
			sb.append("efAcp: ");
			efAcp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAcp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efPrl != null) {
			sb.append("efPrl: ");
			efPrl.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efPrl: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efRuimid != null) {
			sb.append("efRuimid: ");
			efRuimid.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efRuimid: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCsimSt != null) {
			sb.append("efCsimSt: ");
			efCsimSt.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCsimSt: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpc != null) {
			sb.append("efSpc: ");
			efSpc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efOtapaspc != null) {
			sb.append("efOtapaspc: ");
			efOtapaspc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efOtapaspc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efNamlock != null) {
			sb.append("efNamlock: ");
			efNamlock.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efNamlock: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efOta != null) {
			sb.append("efOta: ");
			efOta.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efOta: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSp != null) {
			sb.append("efSp: ");
			efSp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efEsnMeidMe != null) {
			sb.append("efEsnMeidMe: ");
			efEsnMeidMe.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efEsnMeidMe: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efLi != null) {
			sb.append("efLi: ");
			efLi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efLi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efUsgind != null) {
			sb.append("efUsgind: ");
			efUsgind.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efUsgind: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAd != null) {
			sb.append("efAd: ");
			efAd.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAd: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efMaxPrl != null) {
			sb.append("efMaxPrl: ");
			efMaxPrl.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efMaxPrl: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpcs != null) {
			sb.append("efSpcs: ");
			efSpcs.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpcs: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efMecrp != null) {
			sb.append("efMecrp: ");
			efMecrp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efMecrp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efHomeTag != null) {
			sb.append("efHomeTag: ");
			efHomeTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efHomeTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efGroupTag != null) {
			sb.append("efGroupTag: ");
			efGroupTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efGroupTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpecificTag != null) {
			sb.append("efSpecificTag: ");
			efSpecificTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpecificTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCallPrompt != null) {
			sb.append("efCallPrompt: ");
			efCallPrompt.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCallPrompt: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

